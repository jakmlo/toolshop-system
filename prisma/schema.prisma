generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @unique @default(uuid())
  name           String        @unique
  email          String        @unique
  password       String
  role           String?       @default("user")
  photo          String?       @default("default.png")
  accepted       Boolean?      @default(false)
  verified       Boolean?      @default(false)
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?
}

model Tool {
  toolId        String       @id @unique @default(uuid())
  name          String
  catalogNumber String
  description   String?
  category      Category[]
  categoryId    String
  availability  Boolean
  rentals       Rental[]
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
}

model Category {
  categoryId     String        @id @unique @default(uuid())
  name           String
  tools          Tool[]
  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?
}

model Contractor {
  contractorId   String        @id @unique @default(uuid())
  firstName      String
  lastName       String
  taxIdNumber    String @default("NIP")
  address        String
  phoneNumber    String
  rentals        Rental[]
  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?
}

model Rental {
  rentalId     String       @id @unique @default(uuid())
  tools        Tool[]
  contractor   Contractor   @relation(fields: [contractorId], references: [contractorId])
  contractorId String
  rentalDate   DateTime     @default(now())
  returnDate   DateTime
  status       String       @default("pending")
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
}

model Organization {
  organizationId   String @id @unique @default(uuid())
  name             String @unique
  adminId          String? @unique
  users            User[]
  contractors      Contractor[]
  tools            Tool[]
  rentals          Rental[]
  categories       Category[]
  createdAt        DateTime     @default(now())
}

